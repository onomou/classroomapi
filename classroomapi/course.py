from classroomapi.classroom_object import ClassroomObject
from classroomapi.assignment import Assignment
from classroomapi.user import Student, Teacher
from classroomapi.topic import Topic
from classroomapi.material import Material

class Course(ClassroomObject):
    def __init__(self, attributes, service):
        self.service = service
        super().__init__(attributes)

    def get_assignments(self):
        return [Assignment(x) for x in self.service.courses().courseWork().list(courseId=self.id, courseWorkStates=['PUBLISHED','DRAFT']).execute()['courseWork']]
    
    def get_assignment(self, assignment_id):
        return Assignment(self.service.courses().courseWork().get(courseId=self.id, id=assignment_id).execute())

    def get_students(self):
        return [Student(x, self.service) for x in self.service.courses().students().list(courseId=self.id).execute()['students']]
    
    def get_student(self, user_id):
        return Student(self.service.courses().students().get(courseId=self.id, userId=user_id).execute(), self.service)

    def get_teachers(self):
        return [Teacher(x, self.service) for x in self.service.courses().teachers().list(courseId=self.id).execute()['teachers']]
    
    def get_teacher(self, user_id):
        return Teacher(self.service.courses().teachers().get(courseId=self.id, userId=user_id).execute(), self.service)

    def get_users(self):
        return self.get_students() + self.get_teachers()
    
    # TODO: create() for both students and teachers

    # TODO: delete() for both students and teachers

    # TODO: topics
    #       create(courseId, body=None)
    #       delete(courseId, id)
    #       get(courseId, id)
    #       list(courseId, pageSize=None, pageToken=None)
    #       patch(courseId, id, body=None, updateMask=None)
    def get_topics(self):
        return [Topic(x, self.service) for x in self.service.courses().topics().list(courseId=self.id).execute()['topics']]
    
    def get_topic(self, topic_id):
        return Topic(self.service.courses().topics().get(courseId=self.id, id=topic_id).execute(), self.service)
    
    def delete_topic(self, topic_id):
        return self.service().coureses().topics().delete(courseId=self.id, id=topic_id).execute()

    def edit_topic(self, topic_id, body, mask):
        return Topic(self.service.courses().topics().patch(courseId=self.id, id=topic_id, body=body, updateMask=mask).execute(), self.service)

    def create_topic(self, body):
        '''
        body = {
            "courseId": "A String", # Identifier of the course. Read-only.
            "name": "A String", # The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.
            "topicId": "A String", # Unique identifier for the topic. Read-only.
            "updateTime": "A String", # The time the topic was last updated by the system. Read-only.
        }'''
        return Topic(self.service.courses().topics().create(courseId=self.id, body=body).execute(), self.service)

    '''
    Materials
    create(courseId, body=None)
    delete(courseId, id)
    get(courseId, id)
    list(courseId, courseWorkMaterialStates=None, materialDriveId=None, materialLink=None, orderBy=None, pageSize=None, pageToken=None)
    patch(courseId, id, body=None, updateMask=None)
    '''
    def create_material(self, body):
        return Material(self.service.courses().materials().create(courseId=self.id, body=body).execute(), self.service)
    
    def delete_material(self, material_id):
        return self.service.courses().materials().delete(courseId=self.id, id=material_id).execute()
    
    def get_material(self, material_id):
        return Material(self.service.courses().materials().get(courseId=self.id, id=material_id).execute(), self.service)
    
    def get_materials(self):
        return [Material(x, self.service) for x in self.service.courses().materials().list(courseId=self.id).execute()['materials']]